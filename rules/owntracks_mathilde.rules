
//val String where_is_markus ="Don't kown"

val String GoogleAPIKey = "AIzaSyD_DswI2aS9vsGX51fOQKiB6GdWFxfOjnI"

val String OwT_event_mathilde ="unknown"



rule "Owntracks tgdscm41"
when 
    Item OwT_mathilde_raw changed
then

    val String json = (OwT_tgdscm41_raw.state as StringType).toString

    val String type = transform("JSONPATH", "$._type", json)
    if (type == "location") {
      val String lat  = transform("JSONPATH", "$.lat", json)
      val String lon  = transform("JSONPATH", "$.lon", json)
    //  val String acc  = transform("JSONPATH", "$.acc", json)
      val String batt = transform("JSONPATH", "$.batt", json)
      val String tst  = transform("JSONPATH", "$.tst", json)

  //    logError("OWNTRACKS","Pars" + lat)

      OwT_mathilde_battery.postUpdate(new PercentType(batt))
      val geocodeURL = "https://maps.googleapis.com/maps/api/geocode/json?latlng=" + lat + "," + lon + "&sensor=true&key=" + GoogleAPIKey
   
      val String gecodeResponse = sendHttpGetRequest(geocodeURL)
      val String formattedAddress = transform("JSONPATH", "$.results[0].formatted_address", gecodeResponse)
      logError("OWNTRACKS","Pars" + formattedAddress)

     // val String formattedAddressParts = formattedAddress.split(",")
      val String street = formattedAddress.split(',').get(0)
      val String town = formattedAddress.split(',').get(1)
      val String country = formattedAddress.split(',').get(2)

      OwT_mathilde_location_headline.postUpdate(street) 
      OwT_mathilde_location.postUpdate(street + "\r\n" + town + "\r\n" + country)  

      var DateTime time = new DateTime(Long::parseLong(tst) * 1000L)
      OwT_mathilde_update.postUpdate(new DateTimeType(time.toString))  
      logError("OWNTRACKS","Time " + time)

   }
end

